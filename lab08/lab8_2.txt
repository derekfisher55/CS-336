Explain:
-the component structure of the application. What makes the UI composable and why does this matter?
The components of my application follow this hierarchy:
  -CommentBox
    -CommentList
      -Comment
    -CommentForm

  Where components that appear within another component are children of that component.

  This UI is composable because the parents don't know their children ahead of time.
  So, we had to use the props.children property to pass children elements directly into their output.
  So then the components can pass the children along without knowing them.

-what JSX does.
JSX is a preprocessor step that adds XML syntax to JavaScript. You can definitely use React without JSX but JSX makes React a lot more elegant. Just like XML, JSX tags have a tag name, attributes, and children. If an attribute value is enclosed in quotes, the value is a string.

-why ReactJS is safe with respect to XSS.
React doesn't let the server send malicious content to the client. You can't insert anything in the HTML unless you created the elements yourself. 


-how the data flows through the components. How are comments loaded? created? saved.
comments are loaded according to the hierarchy. First CommentBox is loaded and then everything it contains and so forth. Comments are created when a user enters data into the appropriate boxes and clicks submit. 
 

-the nature and purpose of props and state. Which is immutable and which is mutable and why does this distinction matter?
Props are immutable while states are mutable. Props usually are used to pass data along from parents so you wouldn't want to mutate the data. States are mutable so they can change in respect to things like user input. 

Consider the following, more detailed questions based on statements in the tutorial:
-Try editing the comments.json file (to add or remove a legal comment). What happens and why?
When you remove a comment, it is also removed on the page. The website is updating the page based on the comments.json file so it will reflect any changes made to that page. 

-When the CommentBox has loaded comments from the server (in loadCommentsFromServer()),
why doesn’t it call render() to make them visible?
because it's composable, so it's just passing the data along. 


-Of what advantage, if any, is it to require that components always represent the current state of the view?
When everything is current the system will be consistent across the board. 

-The app implements optimistic updates. Isn’t optimism here more like foolishness?
What if the server rejects the new comment (for whatever reason)?



