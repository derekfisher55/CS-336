- What good has this bundling done? How big is the new bundle file?
  Check the Chrome DevTools network log to see what files are being loaded.
The bundling has combined all the necessary files for the webpage into one -
the css files, the script files, and the Webpack libraries. The new bundle file
is pretty large, about 1.3MB.

- What role did Babel play in the bundling?
Babel allows us to use all versions of JavaScript, even if they are not yet
fully supported in all browsers. In this case, the Babel loader is allowing
us to use React's JSX syntax for our JavaScript.

- Can you just load file:///path…/index.html using the browser? Why or why not?
You can, however the HTML page is connected to anything so it won't serve up
any of the comments we're storing. The only thing it loads are the empty
containers.

- In webpack.config.js, what does the loader test entry test: /\.jsx?$/ do?
This entry specifies the file extensions that should run through this loader.
So all .jsx files should run through the Babel loader in our case.

- Check out the new dist/index.html and dist/bundle.js.
  How are they different from the previous versions?
In this section we've bundled the css and html files along with the script files
instead of copying them in, as we did in the previous section.

- What good is it to replace the CDN library loads with module imports?
This makes it so you only load things when you need them. Also, we can split
things in more manageable pieces.

- Check the network log. How many of the new modules you built are being loaded?
  How about the CSS file?
The only thing that's loaded on the network tab is the bundle.js file.

- Try out both ports and explain the difference between them.
  localhost:3001 — Try editing one of the React module files. Explain what happens,
  both to the displayed SPA webpage and to the bundle/index files.
  localhost:3000 — Try loading /api/comments. Explain what you get.
  Does the SPA page running on this port change (due to the edits made above) as well?
When I edit the react module files, port 3001 automatically updates the page to
reflect the changes I made. However, port 3000 does not update to reflect these changes.
When I load /api/comments I get the JSON file of the comments that my application
is loading from. This page does not update automatically when the file is updated.
The JSON file does not change on either port: 3000/api/comments or 3001/api/comments.

- Is it worth all this trouble to build a development configuration?
Depends. If I were to continue to update this web application I would be nice to
have a constantly updated version running on my browser. If you implement it after
the fact it may not be as helpful. 
